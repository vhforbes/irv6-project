import { renderToStaticMarkup } from "react-dom/server";
import { createElement as h } from "react";

import { fileURLToPath } from "node:url";
import path, { dirname } from "node:path";
import {
  existsSync,
  mkdirSync,
  readdirSync,
  readFileSync,
  unlinkSync,
  writeFileSync,
} from "node:fs";

import App from "./app.js";

// Create __dirname equivalent for ES modules
// In commonjs this will alaways be defined while in module this needs to be redefined every single time. They are always defined when using common js.
const __filename = fileURLToPath(import.meta.url); // import.meta.url => Url of the current module eg: file:///home/user/project/src/app.js
const __dirname = dirname(__filename);
const distPath = path.join(__dirname, "dist");

const shell = readFileSync(path.join(__dirname, "index.html"), "utf-8");

const app = renderToStaticMarkup(h(App));
const html = shell.replace("<!--ROOT-->", app);

// Checking if 'dist' directory exists, if it doesn't, create it if it does dele all on it.
if (!existsSync(distPath)) {
  mkdirSync(distPath);
} else {
  const files = readdirSync(distPath);

  for (const file of files) {
    unlinkSync(path.join(distPath, file));
  }
}

// Writing HTML generated by react into a index.html file
writeFileSync(path.join(distPath, "index.html"), html);

// Potential challanges:
// - how could this scale with more files
// - what about routes?
// - and interactivity? Could I bundle js together with this?
